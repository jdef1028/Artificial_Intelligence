# File: hzg972.py# Author: He Zhao# netID: hzg972# Date: Apr 16, 2015# Defines a simple artificially intelligent player agent# You will define the alpha-beta pruning search algorithm# You will also define the score function in the MancalaPlayer class,# a subclass of the Player class.from random import *from decimal import *from copy import *from MancalaBoard import *# a constantINFINITY = 1.0e400class Player:    """ A basic AI (or human) player """    HUMAN = 0    RANDOM = 1    MINIMAX = 2    ABPRUNE = 3    CUSTOM = 4    def __init__(self, playerNum, playerType, ply=0):        """Initialize a Player with a playerNum (1 or 2), playerType (one of        the constants such as HUMAN), and a ply (default is 0)."""        self.num = playerNum        self.opp = 2 - playerNum + 1        self.type = playerType        self.ply = ply    def __repr__(self):        """Returns a string representation of the Player."""        return str(self.num)    def minimaxMove(self, board, ply):        """ Choose the best minimax move.  Returns (score, move) """        move = -1        score = -INFINITY        turn = self        for m in board.legalMoves(self):            #for each legal move            if ply == 0:                #if we're at ply 0, we need to call our eval function & return                return (self.score(board), m)            if board.gameOver():                return (-1, -1)  # Can't make a move, the game is over            nb = deepcopy(board)            #make a new board            nb.makeMove(self, m)            #try the move            opp = Player(self.opp, self.type, self.ply)            s = opp.minValue(nb, ply-1, turn)            #and see what the opponent would do next            if s > score:                #if the result is better than our best score so far, save that move,score                move = m                score = s        #return the best score and move so far        return score, move    def maxValue(self, board, ply, turn):        """ Find the minimax value for the next move for this player        at a given board configuation. Returns score."""        if board.gameOver():            return turn.score(board)        score = -INFINITY        for m in board.legalMoves(self):            if ply == 0:                #print "turn.score(board) in max value is: " + str(turn.score(board))                return turn.score(board)            # make a new player to play the other side            opponent = Player(self.opp, self.type, self.ply)            # Copy the board so that we don't ruin it            nextBoard = deepcopy(board)            nextBoard.makeMove(self, m)            s = opponent.minValue(nextBoard, ply-1, turn)            #print "s in maxValue is: " + str(s)            if s > score:                score = s        return score    def minValue(self, board, ply, turn):        """ Find the minimax value for the next move for this player            at a given board configuation. Returns score."""        if board.gameOver():            return turn.score(board)        score = INFINITY        for m in board.legalMoves(self):            if ply == 0:                #print "turn.score(board) in min Value is: " + str(turn.score(board))                return turn.score(board)            # make a new player to play the other side            opponent = Player(self.opp, self.type, self.ply)            # Copy the board so that we don't ruin it            nextBoard = deepcopy(board)            nextBoard.makeMove(self, m)            s = opponent.maxValue(nextBoard, ply-1, turn)            #print "s in minValue is: " + str(s)            if s < score:                score = s        return score    # The default player defines a very simple score function    # You will write the score function in the MancalaPlayer below    # to improve on this function.    def score(self, board):        """ Returns the score for this player given the state of the board """        if board.hasWon(self.num):            return 100.0        elif board.hasWon(self.opp):            return 0.0        else:            return 50.0    # You should not modify anything before this point.    # The code you will add to this file appears below this line.    # You will write this function (and any helpers you need)    # You should write the function here in its simplest form:    #   1. Use ply to determine when to stop (when ply == 0)    #   2. Search the moves in the order they are returned from the board's    #       legalMoves function.    # However, for your custom player, you may copy this function    # and modify it so that it uses a different termination condition    # and/or a different move search order.    def alphaBetaMove(self, board, ply):        '''Choose the best Alpha-beta pruned move. Returns (score, move).'''        move = -1        score = -INFINITY        turn = self        a = -INFINITY        b = INFINITY        for m in board.legalMoves(self):            #for each legal move            if ply == 0:                #if we're at ply 0, we need to call our eval function & return                return (self.score(board), m)            if board.gameOver():                return (-1, -1)  # Can't make a move, the game is over            nb = deepcopy(board)            #make a new board            nb.makeMove(self, m)            #try the move            opp = Player(self.opp, self.type, self.ply)            s = opp.minAbValue(nb, ply-1, turn, a, b)            #and see what the opponent would do next            if s > score:                #if the result is better than our best score so far, save that move,score                move = m                score = s        #return the best score and move so far        return score, move    def maxAbValue(self, board, ply, turn, a, b):        """ Find the alpha beta prune max value for the next move for this player        at a given board configuation. Returns score."""        if board.gameOver():            return turn.score(board)        score = -INFINITY        for m in board.legalMoves(self):            if ply == 0:                #print "turn.score(board) in max value is: " + str(turn.score(board))                return turn.score(board)            # make a new player to play the other side            opponent = Player(self.opp, self.type, self.ply)            # Copy the board so that we don't ruin it            nextBoard = deepcopy(board)            nextBoard.makeMove(self, m)            s = opponent.minAbValue(nextBoard, ply-1, turn, a, b)            #print "s in maxValue is: " + str(s)            if s > score:                score = s            if score >= b:                return score            if score > a:                a = score        return score    def minAbValue(self, board, ply, turn, a, b):        """ Find the alpha beta min value for the next move for this player            at a given board configuation. Returns score."""        if board.gameOver():            return turn.score(board)        score = INFINITY        for m in board.legalMoves(self):            if ply == 0:                #print "turn.score(board) in min Value is: " + str(turn.score(board))                return turn.score(board)            # make a new player to play the other side            opponent = Player(self.opp, self.type, self.ply)            # Copy the board so that we don't ruin it            nextBoard = deepcopy(board)            nextBoard.makeMove(self, m)            s = opponent.maxAbValue(nextBoard, ply-1, turn, a, b)            #print "s in minValue is: " + str(s)            if s < score:                score = s            if score <= a: #if score worse than a, then ingore                return score            if score < b:                b = score        return score    def customMove(self, board):        #'''Customized player when CUSTOM is selected.'''        #return -1, -1        '''Choose the best Alpha-beta pruned move. Returns (score, move).'''        move = -1        score = -INFINITY        turn = self        ply = 6        a = -INFINITY        b = INFINITY        for m in board.legalMoves(self):            #for each legal move            if ply == 0:                #if we're at ply 0, we need to call our eval function & return                return (self.score(board), m)            if board.gameOver():                return (-1, -1)  # Can't make a move, the game is over            nb = deepcopy(board)            #make a new board            nb.makeMove(self, m)            #try the move            opp = Player(self.opp, self.type, ply)            s = opp.minAbValue(nb, ply-1, turn, a, b)            #and see what the opponent would do next            if s > score:                #if the result is better than our best score so far, save that move,score                move = m                score = s        #return the best score and move so far        return score, move    def chooseMove(self, board):        """ Returns the next move that this player wants to make """        if self.type == self.HUMAN:            move = input("Please enter your move:")            while not board.legalMove(self, move):                print move, "is not valid"                move = input( "Please enter your move" )            return move        elif self.type == self.RANDOM:            move = choice(board.legalMoves(self))            print "chose move", move            return move        elif self.type == self.MINIMAX:            val, move = self.minimaxMove(board, self.ply)            print "chose move", move, " with value", val            return move        elif self.type == self.ABPRUNE:            val, move = self.alphaBetaMove(board, self.ply)            print "chose move", move, " with value", val            return move        elif self.type == self.CUSTOM:            # TODO: Implement a custom player            # You should fill this in with a call to your best move choosing            # function.  You may use whatever search algorithm and scoring            # algorithm you like.  Remember that your player must make            # each move in about 10 seconds or less.            #print "Custom player not yet implemented"            #return -1            val, move = self.customMove(board)            print "chose move", move, " with value", val            return move        else:            print "Unknown player type"            return -1# Note, you should change the name of this player to be your netidclass hzg972(Player):    """ Defines a player that knows how to evaluate a Mancala gameboard        intelligently """    def score(self, board):        """ Evaluate the Mancala board for a customized player """\        #print "Calling customized score function in class hzg972"        # define customized score function        # weights:        s = 0        w1 = 5 # diff between my and opp scores in mancala        w2 = 5 # diff between me or opp to 25/win        w4 = 8 #No.6 empty        w5 = 10 #landing in mancala        w6 = 10 #bonus move after landing in mancala        w7 = 2 #for each empty hole        w8 = 10 #capture bonus of each stone        if self.num == 1:            myscore = board.scoreCups[0]            oppscore = board.scoreCups[1]            mycups = board.P1Cups            oppcups = board.P2Cups        else:            myscore = board.scoreCups[1]            oppscore = board.scoreCups[0]            mycups = board.P2Cups            oppcups = board.P1Cups        mytotal = sum(mycups) #total number of stones in my bins        opptotal = sum(oppcups) #total stones in opp's bins        if oppscore > 24:            return -100.0        elif myscore > 24:            return 100.0        else:            #no one has won for sure            #calculate how far me and opp is from win            s += (25-myscore)*w2            s -= (25-oppscore)*w2            if myscore > oppscore: #curr has more stones than opp in mancala                s += (myscore-oppscore)*w1            else:                s -= (oppscore-myscore)*w1        loc = 0 #location of bin counting from No.1 from the most left        emptyhole = 0 #number of empty holes        for cup in mycups: # for each hole            loc += 1            if cup == 0:            #no move can be made from this hole            #still chance to win over opp's stones                emptyhole += 1                #read number of opp's stones in hole across the board                opploc = 7-loc                #read mycups see if any move would fall a last stone here                for i in range(len(mycups)):                    j = i+1 #hole number                    distance = -1                    if j > loc: #calculate distance from hole to hole                        distance = 13-(j-loc)                    elif j < loc:                        distance = loc-j                    if mycups[i] == distance:                        s += w8*oppcups[opploc-1]                        #make move from hole i so that last stone ends in this empty hole - capture!                if loc == 6:                    s += w4 #additional again for leaving No.6 hole empty            # end empty cup            else:                # normal 1 point gain                if cup > (7-loc): #stones from current bin can reach my mancala                    s += w5                elif cup == (7-loc):                    s += w6            s += w7*emptyhole        if self.num == 1:            print 'myscore:', myscore            print mycups            print 'opp score:', oppscore            print oppcups        #print 'function called with score value:', s        print "lalala"        return s        